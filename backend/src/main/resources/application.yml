# ===============================
# SERVER CONFIGURATION
# ===============================
server:
  port: 8080
  servlet:
    context-path: /api
  compression:
    enabled: true
    mime-types: text/html,text/xml,text/plain,text/css,text/javascript,application/javascript,application/json
    min-response-size: 1024
  http2:
    enabled: true
  tomcat:
    connection-timeout: 20s
    keep-alive-timeout: 20s
    max-connections: 8192
    max-threads: 200
    min-spare-threads: 10

# ===============================
# DATABASE CONFIGURATION
# ===============================
spring:
  datasource:
    url: jdbc:postgresql://${DB_HOST:localhost}:${DB_PORT:5432}/${DB_NAME:smm_panel}
    username: ${DB_USER:postgres}
    password: ${DB_PASSWORD:password}
    driver-class-name: org.postgresql.Driver
    hikari:
      connection-timeout: 20000
      idle-timeout: 300000
      max-lifetime: 1200000
      maximum-pool-size: 50
      minimum-idle: 10
      pool-name: SmmPanelHikariCP
      leak-detection-threshold: 60000
  jpa:
    hibernate:
      ddl-auto: validate
      naming:
        physical-strategy: org.hibernate.boot.model.naming.PhysicalNamingStrategyStandardImpl
    show-sql: false
    properties:
      hibernate:
        dialect: org.hibernate.dialect.PostgreSQLDialect
        format_sql: false
        jdbc:
          batch_size: 25
          batch_versioned_data: true
        order_inserts: true
        order_updates: true
        generate_statistics: true
    open-in-view: false

# ===============================
# REDIS CONFIGURATION
# ===============================
spring:
  data:
    redis:
      host: ${REDIS_HOST:localhost}
      port: ${REDIS_PORT:6379}
      password: ${REDIS_PASSWORD:}
      database: 0
      timeout: 5000ms
      jedis:
        pool:
          enabled: true
          max-active: 50
          max-idle: 20
          min-idle: 5
          max-wait: 2000ms
  cache:
    type: redis
    redis:
      time-to-live: 300000
      key-prefix: smm:cache:
      use-key-prefix: true
      cache-null-values: false

# ===============================
# KAFKA CONFIGURATION
# ===============================
spring:
  kafka:
    bootstrap-servers: ${KAFKA_BOOTSTRAP_SERVERS:localhost:9092}
    producer:
      key-serializer: org.apache.kafka.common.serialization.StringSerializer
      value-serializer: org.springframework.kafka.support.serializer.JsonSerializer
      acks: all
      retries: 3
      properties:
        enable.idempotence: true
    consumer:
      key-deserializer: org.apache.kafka.common.serialization.StringDeserializer
      value-deserializer: org.springframework.kafka.support.serializer.JsonDeserializer
      group-id: smm-panel-group
      auto-offset-reset: earliest
      properties:
        spring.json.trusted.packages: com.smmpanel.event

# ===============================
# SECURITY CONFIGURATION
# ===============================
app:
  jwt:
    secret: ${JWT_SECRET:your-super-secret-jwt-key-change-in-production}
    expiration-ms: ${JWT_EXPIRATION_MS:86400000}
    refresh-expiration-ms: ${JWT_REFRESH_EXPIRATION_MS:604800000}
  security:
    api-key:
      enabled: true
      header: X-API-Key
      hash-algorithm: SHA-256
  cors:
    allowed-origins: ${CORS_ORIGINS:http://localhost:3000,https://demo.perfectpanel.com}
    allowed-methods: GET,POST,PUT,DELETE,OPTIONS
    allowed-headers: "*"
    allow-credentials: true
    max-age: 3600

# ===============================
# RATE LIMITING CONFIGURATION
# ===============================
app:
  rate-limit:
    enabled: true
    orders:
      per-minute: 10
      per-hour: 100
    api:
      per-minute: 60
      per-hour: 1000
    auth:
      per-minute: 5

# ===============================
# EXTERNAL API CONFIGURATIONS
# ===============================
app:
  binom:
    api:
      url: ${BINOM_API_URL:https://your-binom-domain.com/api}
      key: ${BINOM_API_KEY:your-binom-api-key}
      timeout: 30000
      retry-attempts: 3
    default-coefficient: 3.0
    max-campaigns-per-order: 5
  youtube:
    api:
      key: ${YOUTUBE_API_KEY:your-youtube-api-key}
      timeout: 15000
      retry-attempts: 2
    quota:
      daily-limit: 10000
      per-100-seconds: 100
  cryptomus:
    api:
      url: ${CRYPTOMUS_API_URL:https://api.cryptomus.com/v1}
      key: ${CRYPTOMUS_API_KEY:your-cryptomus-api-key}
      secret: ${CRYPTOMUS_API_SECRET:your-cryptomus-api-secret}
    webhook:
      secret: ${CRYPTOMUS_WEBHOOK_SECRET:your-webhook-secret}
    timeout: 30000
  selenium:
    driver:
      path: ${SELENIUM_DRIVER_PATH:/usr/local/bin/chromedriver}
    headless: true
    timeout:
      page-load: 30
      implicit: 10
    max-concurrent-sessions: 5

# ===============================
# RESILIENCE4J CONFIGURATION
# ===============================
resilience4j:
  circuitbreaker:
    instances:
      binom-api:
        failure-rate-threshold: 50
        slow-call-rate-threshold: 50
        slow-call-duration-threshold: 5s
        wait-duration-in-open-state: 30s
        minimum-number-of-calls: 10
        sliding-window-size: 20
      youtube-api:
        failure-rate-threshold: 60
        slow-call-duration-threshold: 10s
        wait-duration-in-open-state: 2m
      payment-api:
        failure-rate-threshold: 40
        slow-call-duration-threshold: 8s
        wait-duration-in-open-state: 1m
  retry:
    instances:
      binom-api:
        max-attempts: 3
        wait-duration: 1s
        exponential-backoff-multiplier: 2
      youtube-api:
        max-attempts: 2
        wait-duration: 2s
      payment-api:
        max-attempts: 2
        wait-duration: 3s

# ===============================
# MONITORING & OBSERVABILITY
# ===============================
management:
  endpoints:
    web:
      exposure:
        include: health,info,metrics,prometheus,loggers
      base-path: /actuator
  endpoint:
    health:
      show-details: when-authorized
      show-components: always
  metrics:
    export:
      prometheus:
        enabled: true
  health:
    livenessstate:
      enabled: true
    readinessstate:
      enabled: true
    db:
      enabled: true
    redis:
      enabled: true
    kafka:
      enabled: true

info:
  app:
    name: SMM Panel
    version: @project.version@
    description: Social Media Marketing Panel
    encoding: @project.build.sourceEncoding@
    java:
      version: @java.version@

# ===============================
# CACHING CONFIGURATION
# ===============================
app:
  cache:
    services:
      ttl: 3600
    users:
      ttl: 1800
    conversion-coefficients:
      ttl: 7200
    youtube-stats:
      ttl: 300

# ===============================
# FILE UPLOAD & PROCESSING
# ===============================
spring:
  servlet:
    multipart:
      enabled: true
      max-file-size: 50MB
      max-request-size: 50MB
      file-size-threshold: 1MB
app:
  file:
    upload:
      path: ${FILE_UPLOAD_PATH:/tmp/smm-panel/uploads}
    processing:
      timeout: 300
      max-concurrent: 3

# ===============================
# LOGGING CONFIGURATION
# ===============================
logging:
  level:
    root: INFO
    com.smmpanel: DEBUG
    org.springframework.security: WARN
    org.hibernate.SQL: WARN
    org.hibernate.type.descriptor.sql.BasicBinder: WARN
  pattern:
    console: "%d{yyyy-MM-dd HH:mm:ss} [%thread] %-5level %logger{36} - %msg%n"
    file: "%d{yyyy-MM-dd HH:mm:ss} [%thread] %-5level %logger{36} - %msg%n"
  file:
    name: ${LOG_FILE_PATH:/var/log/smm-panel/application.log}
  logback:
    rollingpolicy:
      max-file-size: 100MB
      total-size-cap: 1GB
      max-history: 30

# ===============================
# ERROR HANDLING CONFIGURATION
# ===============================
app:
  error:
    include-stack-trace: ${ERROR_INCLUDE_STACK_TRACE:false}
    include-debug-info: ${ERROR_INCLUDE_DEBUG_INFO:false}
server:
  error:
    include-message: always
    include-binding-errors: always

# ===============================
# ASYNC PROCESSING CONFIGURATION
# ===============================
spring:
  task:
    execution:
      pool:
        core-size: 8
        max-size: 20
        queue-capacity: 1000
      thread-name-prefix: smm-async-
    scheduling:
      pool:
        size: 5
      thread-name-prefix: smm-scheduled-

# ===============================
# BUSINESS LOGIC CONFIGURATION
# ===============================
app:
  order:
    processing:
      batch-size: 100
      max-retries: 3
      retry-delay: 5000
      timeout: 300000
  video:
    processing:
      max-concurrent: 5
      timeout: 600000
      clip-length: 60
      quality: medium
  balance:
    minimum-deposit: 1.00
    maximum-deposit: 10000.00
    transaction-timeout: 300000
  perfectpanel:
    compatible: true
    api-version: 2.0
    status-mapping:
      enabled: true

# ===============================
# DEVELOPMENT/DEBUG SETTINGS
# ===============================
spring:
  jpa:
    properties:
      hibernate:
        show_sql: ${DEBUG_SQL:false}
        format_sql: ${DEBUG_SQL:false}
        use_sql_comments: ${DEBUG_SQL:false}
app:
  features:
    youtube-processing:
      enabled: ${YOUTUBE_PROCESSING_ENABLED:true}
    binom-integration:
      enabled: ${BINOM_INTEGRATION_ENABLED:true}
    payment-processing:
      enabled: ${PAYMENT_PROCESSING_ENABLED:true}
    email-notifications:
      enabled: ${EMAIL_NOTIFICATIONS_ENABLED:true}
  monitoring:
    enabled: true
    slow-query-threshold: 1000
    memory-threshold: 80
    cpu-threshold: 80