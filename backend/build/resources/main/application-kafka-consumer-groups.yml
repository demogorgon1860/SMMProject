# Kafka Consumer Group Configuration
app:
  kafka:
    consumer:
      # Session and heartbeat settings
      session-timeout-ms: 30000        # 30 seconds - balance between failure detection and stability
      heartbeat-interval-ms: 3000      # 3 seconds - 1/10th of session timeout (recommended)
      max-poll-interval-ms: 300000     # 5 minutes - max time between polls
      
      # Polling and fetching settings
      max-poll-records: 500            # Balance between throughput and memory
      fetch-min-bytes: 1               # Minimum bytes to fetch
      fetch-max-wait-ms: 500           # Maximum wait time for fetch
      
      # Consumer group specific settings
      groups:
        order-processing:
          group-id: "smm-order-processing-group"
          session-timeout-ms: 45000     # Longer timeout for order processing
          heartbeat-interval-ms: 5000
          max-poll-records: 100         # Smaller batches for order processing
          auto-offset-reset: "earliest"
          
        video-processing:
          group-id: "smm-video-processing-group"
          session-timeout-ms: 60000     # Even longer for video processing
          heartbeat-interval-ms: 6000
          max-poll-records: 50          # Small batches for heavy processing
          auto-offset-reset: "earliest"
          
        youtube-processing:
          group-id: "smm-youtube-processing-group"
          session-timeout-ms: 90000     # Longest timeout for external API calls
          heartbeat-interval-ms: 9000
          max-poll-records: 20          # Very small batches for API rate limiting
          auto-offset-reset: "earliest"
          
        high-throughput:
          group-id: "smm-high-throughput-group"
          session-timeout-ms: 20000     # Shorter timeout for fast processing
          heartbeat-interval-ms: 2000
          max-poll-records: 1000        # Large batches for throughput
          auto-offset-reset: "latest"
          
        low-latency:
          group-id: "smm-low-latency-group"
          session-timeout-ms: 15000     # Short timeout for quick failure detection
          heartbeat-interval-ms: 1500
          max-poll-records: 10          # Very small batches for low latency
          auto-offset-reset: "latest"
          
        dlq-processing:
          group-id: "smm-dlq-processing-group"
          session-timeout-ms: 60000     # Longer timeout for DLQ recovery
          heartbeat-interval-ms: 6000
          max-poll-records: 50
          auto-offset-reset: "earliest"
    
    # Consumer group rebalancing settings
    rebalancing:
      # Rebalance protocol settings
      protocol: "cooperative"           # Use cooperative rebalancing for better stability
      eager-rebalance-timeout: 60000   # Timeout for eager rebalancing
      
      # Partition assignment strategies
      assignment-strategies:
        - "org.apache.kafka.clients.consumer.CooperativeStickyAssignor"
        - "org.apache.kafka.clients.consumer.StickyAssignor"
        - "org.apache.kafka.clients.consumer.RoundRobinAssignor"
      
      # Rebalance monitoring
      monitoring:
        enabled: true
        alert-threshold: 5             # Alert after 5 rebalances in monitoring window
        monitoring-window-minutes: 30  # Monitor rebalances over 30 minutes
        log-partition-assignments: true
        
      # Rebalance recovery settings
      recovery:
        max-retries: 3
        retry-delay-ms: 5000
        enable-auto-recovery: true
    
    # Consumer health monitoring
    health:
      enabled: true
      check-interval-ms: 30000         # Check consumer health every 30 seconds
      unhealthy-threshold: 3           # Mark unhealthy after 3 failed checks
      lag-threshold: 10000             # Alert when consumer lag exceeds 10k messages
      
      # Consumer lifecycle monitoring
      lifecycle:
        log-state-changes: true
        track-assignment-changes: true
        monitor-partition-lag: true
        
    # Load balancing settings
    load-balancing:
      enabled: true
      strategy: "partition-count"       # Balance by partition count
      rebalance-on-capacity-change: true
      min-consumers-per-partition: 1
      max-consumers-per-partition: 3
      
    # Performance tuning per consumer group type
    performance:
      high-throughput:
        concurrency: 5
        batch-processing: true
        async-commits: true
        buffer-size: 65536             # 64KB buffer
        
      low-latency:
        concurrency: 2
        batch-processing: false
        async-commits: false
        buffer-size: 4096              # 4KB buffer
        
      balanced:
        concurrency: 3
        batch-processing: true
        async-commits: false
        buffer-size: 32768             # 32KB buffer

# Spring Kafka Consumer Configuration
spring:
  kafka:
    consumer:
      # Base consumer properties
      bootstrap-servers: ${spring.kafka.bootstrap-servers}
      key-deserializer: org.apache.kafka.common.serialization.StringDeserializer
      value-deserializer: org.springframework.kafka.support.serializer.ErrorHandlingDeserializer
      
      # Consumer group coordination
      group-id: ${app.kafka.consumer.groups.balanced.group-id:smm-panel-group}
      auto-offset-reset: earliest
      enable-auto-commit: false
      
      # Session management
      properties:
        session.timeout.ms: ${app.kafka.consumer.session-timeout-ms}
        heartbeat.interval.ms: ${app.kafka.consumer.heartbeat-interval-ms}
        max.poll.interval.ms: ${app.kafka.consumer.max-poll-interval-ms}
        max.poll.records: ${app.kafka.consumer.max-poll-records}
        
        # Fetch settings
        fetch.min.bytes: ${app.kafka.consumer.fetch-min-bytes}
        fetch.max.wait.ms: ${app.kafka.consumer.fetch-max-wait-ms}
        max.partition.fetch.bytes: 1048576  # 1MB
        
        # Connection settings
        connections.max.idle.ms: 540000     # 9 minutes  
        request.timeout.ms: 30000           # 30 seconds
        retry.backoff.ms: 100
        reconnect.backoff.ms: 50
        reconnect.backoff.max.ms: 1000
        
        # Consumer group settings
        partition.assignment.strategy: 
          - "org.apache.kafka.clients.consumer.CooperativeStickyAssignor"
          - "org.apache.kafka.clients.consumer.StickyAssignor"
        
        # Deserializer settings
        spring.deserializer.value.delegate.class: org.springframework.kafka.support.serializer.JsonDeserializer
        spring.json.trusted.packages: "com.smmpanel.entity,com.smmpanel.dto,com.smmpanel.event,java.util"
        spring.json.use.type.headers: false
        spring.json.value.default.type: java.util.Map
        
        # Consumer metrics
        metric.reporters: ""
        metrics.sample.window.ms: 30000
        metrics.num.samples: 2

# Actuator endpoints for consumer group monitoring
management:
  endpoints:
    web:
      exposure:
        include: health,metrics,consumer-groups,kafka-consumers
  endpoint:
    consumer-groups:
      enabled: true
    kafka-consumers:
      enabled: true
      
  # Consumer group health indicators
  health:
    kafka-consumer-groups:
      enabled: true
    
  # Consumer group metrics
  metrics:
    tags:
      consumer-group-type: balanced
    export:
      prometheus:
        enabled: true
        descriptions: true

# Logging configuration for consumer groups
logging:
  level:
    com.smmpanel.config.KafkaConsumerGroupConfiguration: INFO
    org.apache.kafka.clients.consumer.internals.ConsumerCoordinator: INFO
    org.apache.kafka.clients.consumer.internals.AbstractCoordinator: INFO
    org.springframework.kafka.listener: INFO
    
  pattern:
    console: "%d{yyyy-MM-dd HH:mm:ss} [%thread] %-5level [%X{consumerGroup}] %logger{36} - %msg%n"
    file: "%d{yyyy-MM-dd HH:mm:ss} [%thread] %-5level [%X{consumerGroup}] %logger{36} - %msg%n"

# Custom consumer group monitoring
monitoring:
  consumer-groups:
    enabled: true
    metrics-collection-interval: 60s
    health-check-interval: 30s
    rebalance-alert-threshold: 10
    lag-alert-threshold: 5000
    
    # Alert channels
    alerts:
      enabled: true
      channels:
        - slack
        - email
        - metrics
      
    # Dashboard integration
    dashboard:
      enabled: true
      update-interval: 15s
      retain-metrics-hours: 24