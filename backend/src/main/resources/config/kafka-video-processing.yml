# Kafka Video Processing Configuration
# Environment-specific settings for video processing message queue

app:
  kafka:
    video-processing:
      # === TOPIC CONFIGURATION ===
      topic: ${KAFKA_VIDEO_PROCESSING_TOPIC:video.processing.queue}
      partitions: ${KAFKA_VIDEO_PROCESSING_PARTITIONS:3}
      replication-factor: ${KAFKA_VIDEO_PROCESSING_REPLICATION_FACTOR:1}
      
      # === CONSUMER CONFIGURATION ===
      consumer:
        group-id: ${KAFKA_VIDEO_PROCESSING_GROUP_ID:video-processing-group}
        max-poll-records: ${KAFKA_VIDEO_PROCESSING_MAX_POLL_RECORDS:10}
        session-timeout: ${KAFKA_VIDEO_PROCESSING_SESSION_TIMEOUT:30000}
        processing-timeout: ${KAFKA_VIDEO_PROCESSING_TIMEOUT:300000}
        retry-delay-seconds: ${KAFKA_VIDEO_PROCESSING_RETRY_DELAY:30}
      
      # === PRODUCER CONFIGURATION ===
      producer:
        batch-size: ${KAFKA_VIDEO_PROCESSING_BATCH_SIZE:16384}
        linger-ms: ${KAFKA_VIDEO_PROCESSING_LINGER_MS:5}
        timeout: ${KAFKA_VIDEO_PROCESSING_PRODUCER_TIMEOUT:30000}

spring:
  kafka:
    bootstrap-servers: ${KAFKA_BOOTSTRAP_SERVERS:localhost:9092}
    
    # === GLOBAL KAFKA SETTINGS ===
    client-id: ${KAFKA_CLIENT_ID:smm-panel-video-processing}
    
    consumer:
      # Consumer properties for video processing
      key-deserializer: org.apache.kafka.common.serialization.StringDeserializer
      value-deserializer: org.springframework.kafka.support.serializer.JsonDeserializer
      auto-offset-reset: earliest
      enable-auto-commit: false
      properties:
        spring.json.trusted.packages: "com.smmpanel.dto.kafka"
        spring.json.use.type.info.headers: false
        spring.json.value.default.type: "com.smmpanel.dto.kafka.VideoProcessingMessage"
    
    producer:
      # Producer properties for video processing
      key-serializer: org.apache.kafka.common.serialization.StringSerializer
      value-serializer: org.springframework.kafka.support.serializer.JsonSerializer
      acks: all
      retries: 3
      properties:
        spring.json.add.type.info.headers: false
        enable.idempotence: true
        max.in.flight.requests.per.connection: 5

---
# === DEVELOPMENT ENVIRONMENT ===
spring:
  config:
    activate:
      on-profile: dev

app:
  kafka:
    video-processing:
      # Smaller configuration for development
      partitions: 2
      consumer:
        max-poll-records: 5
        session-timeout: 15000
        processing-timeout: 60000
      producer:
        batch-size: 8192
        linger-ms: 10

spring:
  kafka:
    bootstrap-servers: localhost:9092
    client-id: smm-panel-video-dev

# Development Kafka logging
logging:
  level:
    org.apache.kafka: INFO
    org.springframework.kafka: INFO
    com.smmpanel.service.kafka: DEBUG

---
# === TEST ENVIRONMENT ===
spring:
  config:
    activate:
      on-profile: test

app:
  kafka:
    video-processing:
      # Minimal configuration for testing
      topic: test.video.processing.queue
      partitions: 1
      consumer:
        group-id: test-video-processing-group
        max-poll-records: 3
        session-timeout: 10000
        processing-timeout: 30000
        retry-delay-seconds: 5
      producer:
        batch-size: 1024
        linger-ms: 1
        timeout: 10000

spring:
  kafka:
    bootstrap-servers: localhost:9092
    client-id: smm-panel-video-test

# Test environment - minimal logging
logging:
  level:
    org.apache.kafka: WARN
    org.springframework.kafka: WARN
    com.smmpanel.service.kafka: INFO

---
# === STAGING ENVIRONMENT ===
spring:
  config:
    activate:
      on-profile: staging

app:
  kafka:
    video-processing:
      # Production-like configuration
      partitions: 3
      replication-factor: 2
      consumer:
        max-poll-records: 8
        session-timeout: 25000
        processing-timeout: 240000
      producer:
        batch-size: 12288
        linger-ms: 3

spring:
  kafka:
    bootstrap-servers: ${KAFKA_BOOTSTRAP_SERVERS:kafka-staging:9092}
    client-id: smm-panel-video-staging
    
    # Enhanced reliability for staging
    consumer:
      properties:
        request.timeout.ms: 35000
        fetch.min.bytes: 1
        fetch.max.wait.ms: 300
    
    producer:
      properties:
        delivery.timeout.ms: 90000
        request.timeout.ms: 25000
        retry.backoff.ms: 500

---
# === PRODUCTION ENVIRONMENT ===
spring:
  config:
    activate:
      on-profile: prod

app:
  kafka:
    video-processing:
      # High-performance production configuration
      partitions: ${KAFKA_VIDEO_PROCESSING_PARTITIONS:6}
      replication-factor: ${KAFKA_VIDEO_PROCESSING_REPLICATION_FACTOR:3}
      
      consumer:
        group-id: ${KAFKA_VIDEO_PROCESSING_GROUP_ID:video-processing-prod-group}
        max-poll-records: ${KAFKA_VIDEO_PROCESSING_MAX_POLL_RECORDS:15}
        session-timeout: ${KAFKA_VIDEO_PROCESSING_SESSION_TIMEOUT:45000}
        processing-timeout: ${KAFKA_VIDEO_PROCESSING_TIMEOUT:600000}
        retry-delay-seconds: ${KAFKA_VIDEO_PROCESSING_RETRY_DELAY:60}
      
      producer:
        batch-size: ${KAFKA_VIDEO_PROCESSING_BATCH_SIZE:32768}
        linger-ms: ${KAFKA_VIDEO_PROCESSING_LINGER_MS:2}
        timeout: ${KAFKA_VIDEO_PROCESSING_PRODUCER_TIMEOUT:60000}

spring:
  kafka:
    bootstrap-servers: ${KAFKA_BOOTSTRAP_SERVERS:kafka-cluster:9092}
    client-id: ${KAFKA_CLIENT_ID:smm-panel-video-prod}
    
    # Production reliability and performance settings
    consumer:
      properties:
        request.timeout.ms: 50000
        fetch.min.bytes: 1024
        fetch.max.wait.ms: 500
        max.partition.fetch.bytes: 1048576
        connections.max.idle.ms: 540000
    
    producer:
      properties:
        delivery.timeout.ms: 120000
        request.timeout.ms: 30000
        retry.backoff.ms: 1000
        buffer.memory: 67108864  # 64MB
        compression.type: snappy

# Production logging - structured and minimal
logging:
  level:
    org.apache.kafka: WARN
    org.springframework.kafka: INFO
    com.smmpanel.service.kafka: INFO
    com.smmpanel.config.KafkaVideoProcessingConfig: INFO

---
# === HIGH-LOAD PRODUCTION ENVIRONMENT ===
spring:
  config:
    activate:
      on-profile: prod-high-load

app:
  kafka:
    video-processing:
      # Maximum performance for high-load scenarios
      partitions: ${KAFKA_VIDEO_PROCESSING_PARTITIONS:12}
      replication-factor: ${KAFKA_VIDEO_PROCESSING_REPLICATION_FACTOR:3}
      
      consumer:
        group-id: ${KAFKA_VIDEO_PROCESSING_GROUP_ID:video-processing-high-load-group}
        max-poll-records: ${KAFKA_VIDEO_PROCESSING_MAX_POLL_RECORDS:25}
        session-timeout: ${KAFKA_VIDEO_PROCESSING_SESSION_TIMEOUT:60000}
        processing-timeout: ${KAFKA_VIDEO_PROCESSING_TIMEOUT:900000}
        retry-delay-seconds: ${KAFKA_VIDEO_PROCESSING_RETRY_DELAY:120}
      
      producer:
        batch-size: ${KAFKA_VIDEO_PROCESSING_BATCH_SIZE:65536}
        linger-ms: ${KAFKA_VIDEO_PROCESSING_LINGER_MS:1}
        timeout: ${KAFKA_VIDEO_PROCESSING_PRODUCER_TIMEOUT:90000}

spring:
  kafka:
    bootstrap-servers: ${KAFKA_BOOTSTRAP_SERVERS:kafka-high-load-cluster:9092}
    client-id: ${KAFKA_CLIENT_ID:smm-panel-video-high-load}
    
    # Maximum performance settings
    consumer:
      properties:
        request.timeout.ms: 70000
        fetch.min.bytes: 2048
        fetch.max.wait.ms: 200
        max.partition.fetch.bytes: 2097152  # 2MB
        connections.max.idle.ms: 600000
        receive.buffer.bytes: 131072  # 128KB
        send.buffer.bytes: 131072     # 128KB
    
    producer:
      properties:
        delivery.timeout.ms: 180000
        request.timeout.ms: 40000
        retry.backoff.ms: 500
        buffer.memory: 134217728  # 128MB
        compression.type: lz4     # Faster compression
        batch.size: 65536
        linger.ms: 1

# High-load monitoring
logging:
  level:
    org.apache.kafka: ERROR
    org.springframework.kafka: WARN
    com.smmpanel.service.kafka: INFO

# === ACTUATOR HEALTH CHECKS ===
management:
  endpoint:
    health:
      show-details: always
  endpoints:
    web:
      exposure:
        include: health,metrics,kafka
  health:
    kafka:
      enabled: true
  metrics:
    export:
      prometheus:
        enabled: true
    distribution:
      percentiles:
        kafka.producer: 0.5, 0.75, 0.95, 0.99
        kafka.consumer: 0.5, 0.75, 0.95, 0.99