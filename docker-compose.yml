# docker-compose.yml
# Production-ready infrastructure for SMM Panel
version: '3.9'

# Environment variables can be set in .env file
x-common-env: &common-env
  TZ: ${TZ:-UTC}
  SPRING_PROFILES_ACTIVE: ${SPRING_PROFILES_ACTIVE:-prod}
  SPRING_DATASOURCE_URL: jdbc:postgresql://postgres:5432/${POSTGRES_DB:-smm_panel}
  SPRING_DATASOURCE_USERNAME: ${POSTGRES_USER:-smm_admin}
  SPRING_DATASOURCE_PASSWORD: ${POSTGRES_PASSWORD}
  SPRING_REDIS_HOST: redis
  SPRING_REDIS_PORT: 6379
  SPRING_KAFKA_BOOTSTRAP_SERVERS: kafka:9093
  SPRING_SLEUTH_SAMPLER_PROBABILITY: 1.0
  MANAGEMENT_ENDPOINTS_WEB_EXPOSURE_INCLUDE: health,info,metrics,prometheus
  MANAGEMENT_ENDPOINT_HEALTH_SHOWDETAILS: always
  MANAGEMENT_ENDPOINT_HEALTH_SHOWCOMPONENTS: always
  MANAGEMENT_HEALTH_REDIS_ENABLED: true
  MANAGEMENT_HEALTH_DB_ENABLED: true
  MANAGEMENT_HEALTH_DISKSPACETHRESHOLD: 10MB
  MANAGEMENT_ENDPOINT_METRICS_ENABLED: true
  MANAGEMENT_METRICS_EXPORT_PROMETHEUS_ENABLED: true
  MANAGEMENT_METRICS_DISTRIBUTION_PERCENTILES_HISTOGRAM_HTTP_SERVER_REQUESTS: true
  MANAGEMENT_METRICS_ENABLE_HTTP_CLIENT_METRICS: true
  MANAGEMENT_METRICS_ENABLE_JVM: true
  MANAGEMENT_METRICS_ENABLE_SYSTEM: true
  MANAGEMENT_METRICS_ENABLE_PROCESS_FILES: true
  MANAGEMENT_METRICS_ENABLE_PROCESS_CPU: true
  MANAGEMENT_METRICS_ENABLE_JVM_GC: true
  MANAGEMENT_METRICS_ENABLE_JVM_MEMORY: true
  MANAGEMENT_METRICS_ENABLE_JVM_THREADS: true
  MANAGEMENT_METRICS_ENABLE_LOGIN_METRICS: true
  MANAGEMENT_METRICS_ENABLE_HTTP_REQUEST_METRICS: true
  MANAGEMENT_METRICS_ENABLE_TOMCAT_METRICS: true
  MANAGEMENT_METRICS_ENABLE_HIBERNATE_METRICS: true
  MANAGEMENT_METRICS_ENABLE_CACHE_METRICS: true
  MANAGEMENT_METRICS_ENABLE_REDIS_METRICS: true
  MANAGEMENT_METRICS_ENABLE_KAFKA_METRICS: true
  MANAGEMENT_METRICS_ENABLE_SYSTEM_CPU: true
  MANAGEMENT_METRICS_ENABLE_SYSTEM_UPTIME: true
  MANAGEMENT_METRICS_ENABLE_SYSTEM_PROCESS: true

services:
  # PostgreSQL with high performance configuration
  postgres:
    image: postgres:15-alpine
    container_name: smm_postgres
    restart: unless-stopped
    ports:
      - "5432:5432"
    environment:
      POSTGRES_DB: smm_panel
      POSTGRES_USER: ${POSTGRES_USER:-smm_admin}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_INITDB_ARGS: "-E UTF8 --locale=en_US.UTF-8"
      PGDATA: /var/lib/postgresql/data/pgdata
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./init-scripts:/docker-entrypoint-initdb.d
      - ./postgresql.conf:/etc/postgresql/postgresql.conf
    command: postgres -c config_file=/etc/postgresql/postgresql.conf
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-smm_admin} -d smm_panel"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - smm_network
    deploy:
      resources:
        limits:
          cpus: '4'
          memory: 8G
        reservations:
          cpus: '2'
          memory: 4G

  # Redis for caching with persistence
  redis:
    image: redis:7-alpine
    container_name: smm_redis
    restart: unless-stopped
    ports:
      - "6379:6379"
    command: redis-server /usr/local/etc/redis/redis.conf
    volumes:
      - redis_data:/data
      - ./redis.conf:/usr/local/etc/redis/redis.conf
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - smm_network
    deploy:
      resources:
        limits:
          cpus: '2'
          memory: 4G
        reservations:
          cpus: '1'
          memory: 2G

  # Kafka for event streaming
  zookeeper:
    image: confluentinc/cp-zookeeper:7.5.0
    container_name: smm_zookeeper
    restart: unless-stopped
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
      ZOOKEEPER_SYNC_LIMIT: 2
    volumes:
      - zookeeper_data:/var/lib/zookeeper/data
      - zookeeper_logs:/var/lib/zookeeper/log
    healthcheck:
      test: ["CMD", "nc", "-z", "localhost", "2181"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - smm_network

  kafka:
    image: confluentinc/cp-kafka:7.5.0
    container_name: smm_kafka
    restart: unless-stopped
    depends_on:
      zookeeper:
        condition: service_healthy
    ports:
      - "9092:9092"
      - "9093:9093"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_ADVERTISED_LISTENERS: INTERNAL://kafka:9093,EXTERNAL://localhost:9092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: INTERNAL:PLAINTEXT,EXTERNAL:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: INTERNAL
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
      KAFKA_LOG_RETENTION_HOURS: 168
      KAFKA_LOG_SEGMENT_BYTES: 1073741824
      KAFKA_LOG_RETENTION_CHECK_INTERVAL_MS: 300000
      KAFKA_COMPRESSION_TYPE: snappy
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: 'true'
      KAFKA_DELETE_TOPIC_ENABLE: 'true'
    volumes:
      - kafka_data:/var/lib/kafka/data
    healthcheck:
      test: ["CMD", "kafka-broker-api-versions", "--bootstrap-server", "localhost:9093"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - smm_network
    deploy:
      resources:
        limits:
          cpus: '2'
          memory: 4G
        reservations:
          cpus: '1'
          memory: 2G

  # Spring Boot Application
  spring-boot-app:
    build:
      context: ./backend
      dockerfile: Dockerfile
    image: smm-panel-backend:latest
    container_name: smm_backend
    restart: unless-stopped
    ports:
      - "8080:8080"
    environment:
      SPRING_PROFILES_ACTIVE: production
      SPRING_DATASOURCE_URL: jdbc:postgresql://postgres:5432/smm_panel
      SPRING_DATASOURCE_USERNAME: ${POSTGRES_USER:-smm_admin}
      SPRING_DATASOURCE_PASSWORD: ${POSTGRES_PASSWORD}
      SPRING_REDIS_HOST: redis
      SPRING_REDIS_PORT: 6379
      SPRING_KAFKA_BOOTSTRAP_SERVERS: kafka:9093
      JAVA_OPTS: "-Xms2g -Xmx4g -XX:+UseG1GC -XX:MaxGCPauseMillis=200"
    volumes:
      - ./backend/logs:/app/logs
    networks:
      - smm_network
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      kafka:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/actuator/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    deploy:
      replicas: 2
      resources:
        limits:
          cpus: '2'
          memory: 4G
        reservations:
          cpus: '1'
          memory: 2G

  # React Frontend
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    image: smm-panel-frontend:latest
    container_name: smm_frontend
    restart: unless-stopped
    ports:
      - "3001:80"
    volumes:
      - ./frontend/nginx.conf:/etc/nginx/nginx.conf
    networks:
      - smm_network
    depends_on:
      - spring-boot-app

  # Selenium Hub for YouTube automation
  selenium-hub:
    image: selenium/hub:4.15.0
    container_name: smm_selenium_hub
    restart: unless-stopped
    ports:
      - "4444:4444"
      - "4442:4442"
      - "4443:4443"
    environment:
      SE_NODE_MAX_SESSIONS: 5
      SE_NODE_SESSION_TIMEOUT: 300
      SE_SESSION_REQUEST_TIMEOUT: 300
      SE_SESSION_RETRY_INTERVAL: 15
    networks:
      - smm_network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:4444/wd/hub/status"]
      interval: 15s
      timeout: 10s
      retries: 3

  # Chrome nodes for Selenium
  chrome-node-1:
    image: selenium/node-chrome:4.15.0
    container_name: smm_chrome_1
    restart: unless-stopped
    depends_on:
      selenium-hub:
        condition: service_healthy
    environment:
      SE_EVENT_BUS_HOST: selenium-hub
      SE_EVENT_BUS_PUBLISH_PORT: 4442
      SE_EVENT_BUS_SUBSCRIBE_PORT: 4443
      SE_NODE_MAX_SESSIONS: 2
      SE_VNC_NO_PASSWORD: 1
      SE_SCREEN_WIDTH: 1920
      SE_SCREEN_HEIGHT: 1080
      SE_OPTS: "--log-level WARNING"
    shm_size: '2gb'
    volumes:
      - /dev/shm:/dev/shm
    networks:
      - smm_network

  chrome-node-2:
    image: selenium/node-chrome:4.15.0
    container_name: smm_chrome_2
    restart: unless-stopped
    depends_on:
      selenium-hub:
        condition: service_healthy
    environment:
      SE_EVENT_BUS_HOST: selenium-hub
      SE_EVENT_BUS_PUBLISH_PORT: 4442
      SE_EVENT_BUS_SUBSCRIBE_PORT: 4443
      SE_NODE_MAX_SESSIONS: 2
      SE_VNC_NO_PASSWORD: 1
      SE_SCREEN_WIDTH: 1920
      SE_SCREEN_HEIGHT: 1080
      SE_OPTS: "--log-level WARNING"
    shm_size: '2gb'
    volumes:
      - /dev/shm:/dev/shm
    networks:
      - smm_network

  # Nginx as reverse proxy and load balancer
  nginx:
    image: nginx:alpine
    container_name: smm_nginx
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf
      - ./nginx/conf.d:/etc/nginx/conf.d
      - ./nginx/ssl:/etc/nginx/ssl
      - nginx_logs:/var/log/nginx
    networks:
      - smm_network
    depends_on:
      - spring-boot-app
    healthcheck:
      test: ["CMD", "wget", "--quiet", "--tries=1", "--spider", "http://localhost/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Prometheus for metrics collection
  prometheus:
    image: prom/prometheus:latest
    container_name: smm_prometheus
    restart: unless-stopped
    ports:
      - "9090:9090"
    volumes:
      - ./prometheus:/etc/prometheus
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/usr/share/prometheus/console_libraries'
      - '--web.console.templates=/usr/share/prometheus/consoles'
      - '--web.enable-lifecycle'
    networks:
      - smm_network
    depends_on:
      - backend
    healthcheck:
      test: ["CMD", "wget", "--spider", "http://localhost:9090/-/healthy"]
      interval: 30s
      timeout: 10s
      retries: 3
    deploy:
      resources:
        limits:
          cpus: '1'
          memory: 1G

  # Grafana for visualization
  grafana:
    image: grafana/grafana:latest
    container_name: smm_grafana
    restart: unless-stopped
    ports:
      - "3000:3000"
    volumes:
      - grafana_data:/var/lib/grafana
      - ./grafana/provisioning:/etc/grafana/provisioning
    environment:
      - GF_SECURITY_ADMIN_USER=${GRAFANA_USER:-admin}
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_PASSWORD:-admin}
      - GF_USERS_ALLOW_SIGN_UP=false
    networks:
      - smm_network
    depends_on:
      - prometheus
    healthcheck:
      test: ["CMD", "wget", "--spider", "http://localhost:3000/api/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    deploy:
      resources:
        limits:
          cpus: '1'
          memory: 1G

  # Loki for logs
  loki:
    image: grafana/loki:latest
    container_name: smm_loki
    restart: unless-stopped
    ports:
      - "3100:3100"
    volumes:
      - loki_data:/loki
    command: -config.file=/etc/loki/local-config.yaml
    networks:
      - smm_network
    healthcheck:
      test: ["CMD-SHELL", "wget -q -O - http://localhost:3100/ready"]
      interval: 10s
      timeout: 5s
      retries: 3
    deploy:
      resources:
        limits:
          cpus: '1'
          memory: 1G

  # Promtail for log collection
  promtail:
    image: grafana/promtail:latest
    container_name: smm_promtail
    restart: unless-stopped
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
      - ./promtail:/etc/promtail
      - /var/log:/var/log:ro
    command: -config.file=/etc/promtail/promtail-config.yml
    networks:
      - smm_network
    depends_on:
      - loki
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 512M

  # Jaeger for distributed tracing
  jaeger:
    image: jaegertracing/all-in-one:latest
    container_name: smm_jaeger
    restart: unless-stopped
    ports:
      - "16686:16686"  # UI
      - "14268:14268"  # HTTP collector
      - "14250:14250"  # GRPC collector
      - "4317:4317"    # OTLP gRPC
      - "4318:4318"    # OTLP HTTP
    environment:
      - COLLECTOR_OTLP_ENABLED=true
    networks:
      - smm_network
    healthcheck:
      test: ["CMD", "wget", "--spider", "http://localhost:14269/healthz"]
      interval: 30s
      timeout: 10s
      retries: 3
    deploy:
      resources:
        limits:
          cpus: '1'
          memory: 1G

  # Portainer for container management
  portainer:
    image: portainer/portainer-ce:latest
    container_name: smm_portainer
    restart: unless-stopped
    ports:
      - "9000:9000"
      - "8000:8000"
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
      - portainer_data:/data
    networks:
      - smm_network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9000/api/status"]
      interval: 30s
      timeout: 5s
      retries: 3
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 512M

networks:
  smm_network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  kafka_data:
    driver: local
  zookeeper_data:
    driver: local
  zookeeper_logs:
    driver: local
  kafka_logs:
    driver: local
  prometheus_data:
    driver: local
  grafana_data:
    driver: local
  loki_data:
    driver: local
  portainer_data:
    driver: local
  nginx_logs:
    driver: local