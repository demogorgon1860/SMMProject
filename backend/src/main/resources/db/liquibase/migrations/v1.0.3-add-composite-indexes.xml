<?xml version="1.0" encoding="UTF-8"?>
<databaseChangeLog
    xmlns="http://www.liquibase.org/xml/ns/dbchangelog"
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
    xsi:schemaLocation="http://www.liquibase.org/xml/ns/dbchangelog 
                        http://www.liquibase.org/xml/ns/dbchangelog/dbchangelog-4.20.xsd">

    <!-- 
    v1.0.3 - Add Composite Indexes
    
    This migration adds composite indexes for complex query patterns used in production.
    These indexes are optimized for specific business logic and reporting queries.
    
    Context: prod,stage (production and staging environments only - these are performance-critical)
    Rollback: Full rollback support - drops all created indexes
    -->

    <changeSet id="1.0.3-add-orders-processing-queue-index" author="performance-team" context="prod,stage">
        <comment>Add composite index for order processing queue optimization - critical for order processing performance</comment>
        
        <preConditions onFail="MARK_RAN">
            <tableExists tableName="orders"/>
            <not>
                <indexExists indexName="idx_orders_processing_queue"/>
            </not>
        </preConditions>

        <sql>
            CREATE INDEX idx_orders_processing_queue 
            ON orders(status, processing_priority DESC, created_at ASC) 
            WHERE status IN ('PENDING', 'IN_PROGRESS', 'PROCESSING');
        </sql>

        <rollback>
            <sql>DROP INDEX IF EXISTS idx_orders_processing_queue;</sql>
        </rollback>
    </changeSet>

    <changeSet id="1.0.3-add-orders-user-status-priority-index" author="performance-team" context="prod,stage">
        <comment>Add composite index for user order history with status filtering</comment>
        
        <preConditions onFail="MARK_RAN">
            <tableExists tableName="orders"/>
            <not>
                <indexExists indexName="idx_orders_user_status_priority"/>
            </not>
        </preConditions>

        <createIndex tableName="orders" indexName="idx_orders_user_status_priority" unique="false">
            <column name="user_id"/>
            <column name="status"/>
            <column name="created_at" descending="true"/>
        </createIndex>

        <rollback>
            <dropIndex tableName="orders" indexName="idx_orders_user_status_priority"/>
        </rollback>
    </changeSet>

    <changeSet id="1.0.3-add-video-processing-retry-queue-index" author="performance-team" context="prod,stage">
        <comment>Add composite index for video processing retry logic optimization</comment>
        
        <preConditions onFail="MARK_RAN">
            <tableExists tableName="video_processing"/>
            <not>
                <indexExists indexName="idx_video_processing_retry_queue"/>
            </not>
        </preConditions>

        <sql>
            CREATE INDEX idx_video_processing_retry_queue 
            ON video_processing(status, processing_attempts, last_processed_at) 
            WHERE status IN ('FAILED', 'RETRYING') AND processing_attempts &lt; 5;
        </sql>

        <rollback>
            <sql>DROP INDEX IF EXISTS idx_video_processing_retry_queue;</sql>
        </rollback>
    </changeSet>

    <changeSet id="1.0.3-add-binom-campaigns-performance-index" author="performance-team" context="prod,stage">
        <comment>Add composite index for campaign performance tracking</comment>
        
        <preConditions onFail="MARK_RAN">
            <tableExists tableName="binom_campaigns"/>
            <not>
                <indexExists indexName="idx_binom_campaigns_performance"/>
            </not>
        </preConditions>

        <sql>
            CREATE INDEX idx_binom_campaigns_performance 
            ON binom_campaigns(status, fixed_campaign_id, clicks_delivered, clicks_required) 
            WHERE status = 'ACTIVE';
        </sql>

        <rollback>
            <sql>DROP INDEX IF EXISTS idx_binom_campaigns_performance;</sql>
        </rollback>
    </changeSet>

    <changeSet id="1.0.3-add-balance-transactions-reporting-index" author="performance-team" context="prod,stage">
        <comment>Add composite index for balance transaction reporting with included columns</comment>
        
        <preConditions onFail="MARK_RAN">
            <tableExists tableName="balance_transactions"/>
            <not>
                <indexExists indexName="idx_balance_transactions_reporting"/>
            </not>
        </preConditions>

        <sql>
            CREATE INDEX idx_balance_transactions_reporting 
            ON balance_transactions(user_id, transaction_type, created_at DESC) 
            INCLUDE (amount, balance_after);
        </sql>

        <rollback>
            <sql>DROP INDEX IF EXISTS idx_balance_transactions_reporting;</sql>
        </rollback>
    </changeSet>

    <changeSet id="1.0.3-add-video-processing-account-workload-index" author="performance-team" context="prod,stage">
        <comment>Add composite index for YouTube account workload distribution</comment>
        
        <preConditions onFail="MARK_RAN">
            <tableExists tableName="video_processing"/>
            <not>
                <indexExists indexName="idx_video_processing_account_workload"/>
            </not>
        </preConditions>

        <createIndex tableName="video_processing" indexName="idx_video_processing_account_workload" unique="false">
            <column name="youtube_account_id"/>
            <column name="status"/>
            <column name="created_at" descending="true"/>
        </createIndex>

        <rollback>
            <dropIndex tableName="video_processing" indexName="idx_video_processing_account_workload"/>
        </rollback>
    </changeSet>

    <changeSet id="1.0.3-add-orders-geo-status-index" author="performance-team" context="prod,stage">
        <comment>Add composite index for geo-targeted order queries</comment>
        
        <preConditions onFail="MARK_RAN">
            <tableExists tableName="orders"/>
            <not>
                <indexExists indexName="idx_orders_geo_status"/>
            </not>
        </preConditions>

        <createIndex tableName="orders" indexName="idx_orders_geo_status" unique="false">
            <column name="target_country"/>
            <column name="status"/>
            <column name="created_at" descending="true"/>
        </createIndex>

        <rollback>
            <dropIndex tableName="orders" indexName="idx_orders_geo_status"/>
        </rollback>
    </changeSet>

    <changeSet id="1.0.3-add-orders-coefficient-status-index" author="performance-team" context="prod,stage">
        <comment>Add composite index for campaign optimization queries</comment>
        
        <preConditions onFail="MARK_RAN">
            <tableExists tableName="orders"/>
            <not>
                <indexExists indexName="idx_orders_coefficient_status"/>
            </not>
        </preConditions>

        <createIndex tableName="orders" indexName="idx_orders_coefficient_status" unique="false">
            <column name="coefficient"/>
            <column name="status"/>
            <column name="created_at" descending="true"/>
        </createIndex>

        <rollback>
            <dropIndex tableName="orders" indexName="idx_orders_coefficient_status"/>
        </rollback>
    </changeSet>

    <changeSet id="1.0.3-record-migration-metadata" author="performance-team" context="prod,stage">
        <comment>Record migration execution metadata</comment>
        
        <insert tableName="liquibase_migration_metadata">
            <column name="changeset_id" value="1.0.3-add-composite-indexes"/>
            <column name="version" value="1.0.3"/>
            <column name="context" value="prod,stage"/>
            <column name="rollback_available" valueBoolean="true"/>
            <column name="notes" value="Added 8 composite indexes for complex query patterns and business logic optimization"/>
        </insert>

        <rollback>
            <delete tableName="liquibase_migration_metadata">
                <where>changeset_id = '1.0.3-add-composite-indexes'</where>
            </delete>
        </rollback>
    </changeSet>

</databaseChangeLog>