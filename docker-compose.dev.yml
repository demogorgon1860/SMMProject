version: '3.8'

services:
  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: smm_panel_postgres
    environment:
      POSTGRES_DB: smm_panel
      POSTGRES_USER: smm_admin
      POSTGRES_PASSWORD: dev_password_123
      POSTGRES_INITDB_ARGS: "--encoding=UTF-8"
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./init-scripts:/docker-entrypoint-initdb.d
    networks:
      - smm-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U smm_admin -d smm_panel"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Redis Cache
  redis:
    image: redis:7-alpine
    container_name: smm_panel_redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - smm-network
    restart: unless-stopped
    command: redis-server --appendonly yes --requirepass dev_redis_pass
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Apache Kafka
  zookeeper:
    image: confluentinc/cp-zookeeper:7.4.0
    container_name: smm_panel_zookeeper
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    networks:
      - smm-network
    restart: unless-stopped

  kafka:
    image: confluentinc/cp-kafka:7.4.0
    container_name: smm_panel_kafka
    depends_on:
      - zookeeper
    ports:
      - "9092:9092"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:29092,PLAINTEXT_HOST://localhost:9092
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: true
    networks:
      - smm-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "kafka-broker-api-versions", "--bootstrap-server", "localhost:9092"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Kafka Topics Initialization
  kafka-topics:
    image: confluentinc/cp-kafka:7.4.0
    container_name: smm_panel_kafka_topics
    depends_on:
      - kafka
    command: |
      bash -c "
        # Wait for Kafka to start
        echo 'Waiting for Kafka to start...'
        while ! kafka-broker-api-versions --bootstrap-server kafka:29092 > /dev/null 2>&1; do
          sleep 1
        done
        
        echo 'Creating Kafka topics...'
        
        # Create offer assignment events topic
        kafka-topics --create --if-not-exists \
          --bootstrap-server kafka:29092 \
          --topic offer-assignment-events \
          --partitions 3 \
          --replication-factor 1
          
        # Create video processing events topic
        kafka-topics --create --if-not-exists \
          --bootstrap-server kafka:29092 \
          --topic video-processing-events \
          --partitions 3 \
          --replication-factor 1
          
        # Create order update events topic
        kafka-topics --create --if-not-exists \
          --bootstrap-server kafka:29092 \
          --topic order-update-events \
          --partitions 3 \
          --replication-factor 1
          
        echo 'Kafka topics created successfully'
      "
    networks:
      - smm-network

  # Prometheus for metrics
  prometheus:
    image: prom/prometheus:latest
    container_name: smm_panel_prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    networks:
      - smm-network
    restart: unless-stopped

  # Grafana for dashboards
  grafana:
    image: grafana/grafana:latest
    container_name: smm_panel_grafana
    ports:
      - "3000:3000"
    environment:
      GF_SECURITY_ADMIN_PASSWORD: admin123
      GF_USERS_ALLOW_SIGN_UP: false
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana/dashboards:/etc/grafana/provisioning/dashboards
      - ./monitoring/grafana/datasources:/etc/grafana/provisioning/datasources
    networks:
      - smm-network
    restart: unless-stopped
    depends_on:
      - prometheus

  # SMM Panel Application
  smm-panel-app:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: smm_panel_app
    ports:
      - "8080:8080"
    environment:
      # Database
      POSTGRES_HOST: postgres
      POSTGRES_PORT: 5432
      POSTGRES_DB: smm_panel
      POSTGRES_USER: smm_admin
      POSTGRES_PASSWORD: dev_password_123
      
      # Redis
      REDIS_HOST: redis
      REDIS_PORT: 6379
      REDIS_PASSWORD: dev_redis_pass
      
      # Kafka
      KAFKA_BOOTSTRAP_SERVERS: kafka:29092
      
      # Binom (replace with actual values)
      BINOM_API_URL: https://your-binom-tracker.com/api
      BINOM_API_KEY: your_dev_binom_api_key
      
      # Application
      SPRING_PROFILES_ACTIVE: development
      LOGGING_LEVEL_COM_SMMPANEL: DEBUG
      
    volumes:
      - app_logs:/app/logs
    networks:
      - smm-network
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      kafka:
        condition: service_healthy
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/actuator/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s

  # Kafka UI for monitoring
  kafka-ui:
    image: provectuslabs/kafka-ui:latest
    container_name: smm_panel_kafka_ui
    ports:
      - "8081:8080"
    environment:
      KAFKA_CLUSTERS_0_NAME: local
      KAFKA_CLUSTERS_0_BOOTSTRAPSERVERS: kafka:29092
    networks:
      - smm-network
    depends_on:
      - kafka
    restart: unless-stopped

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  prometheus_data:
    driver: local
  grafana_data:
    driver: local
  app_logs:
    driver: local

networks:
  smm-network:
    driver: bridge
