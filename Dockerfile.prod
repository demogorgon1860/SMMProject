# Build stage (for CI/CD pipelines)
FROM eclipse-temurin:17-jdk-jammy AS builder

WORKDIR /app

# Copy Gradle files
COPY backend/build.gradle backend/settings.gradle backend/gradlew ./
COPY backend/gradle ./gradle

# Make gradlew executable
RUN chmod +x ./gradlew

# Download dependencies (cached layer)
RUN ./gradlew dependencies --no-daemon

# Copy source code
COPY backend/src ./src

# Build application
RUN ./gradlew clean bootJar --no-daemon -x test

# Runtime stage
FROM eclipse-temurin:17-jre-jammy

# Install required packages
RUN apt-get update && \
    apt-get install -y \
        curl \
        dumb-init && \
    rm -rf /var/lib/apt/lists/*

# Create application user
RUN groupadd -r smmapp && useradd -r -g smmapp smmapp

# Set working directory
WORKDIR /app

# Copy built JAR from builder stage
COPY --from=builder --chown=smmapp:smmapp /app/build/libs/*.jar app.jar

# Create necessary directories
RUN mkdir -p /app/logs /app/config && \
    chown -R smmapp:smmapp /app

# Switch to application user
USER smmapp

# Expose port
EXPOSE 8080

# Health check
HEALTHCHECK --interval=30s --timeout=10s --start-period=60s --retries=3 \
  CMD curl -f http://localhost:8080/actuator/health || exit 1

# Production JVM options
ENV JAVA_OPTS="-server \
               -Xms1g -Xmx2g \
               -XX:+UseG1GC \
               -XX:MaxGCPauseMillis=200 \
               -XX:+UseContainerSupport \
               -XX:MaxRAMPercentage=75.0 \
               -XX:InitialRAMPercentage=50.0 \
               -XX:+ExitOnOutOfMemoryError \
               -XX:+HeapDumpOnOutOfMemoryError \
               -XX:HeapDumpPath=/app/logs/ \
               -Djava.security.egd=file:/dev/./urandom \
               -Dspring.profiles.active=production"

# Use dumb-init to handle signals properly
ENTRYPOINT ["dumb-init", "--"]
CMD ["sh", "-c", "java $JAVA_OPTS -jar app.jar"]
