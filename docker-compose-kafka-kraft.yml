# Kafka with KRaft Mode Configuration (No Zookeeper)
# =====================================================
# Single-node Kafka setup using KRaft consensus protocol
# Optimized for development and single-node production
# Compatible with Spring Boot 3.1.7 / Spring Kafka 3.0.x

version: '3.9'

services:
  # Kafka with KRaft Mode (No Zookeeper Required)
  kafka:
    image: confluentinc/cp-kafka:7.4.0
    container_name: smm_kafka_kraft
    hostname: kafka
    restart: unless-stopped
    ports:
      - "9092:9092"      # External client access
      - "9093:9093"      # Controller port (KRaft)
      - "9101:9101"      # JMX metrics port
    environment:
      # KRaft Mode Configuration
      KAFKA_NODE_ID: 1
      KAFKA_PROCESS_ROLES: 'broker,controller'
      KAFKA_CONTROLLER_QUORUM_VOTERS: '1@kafka:9093'
      
      # Listeners Configuration
      KAFKA_LISTENERS: 'INTERNAL://0.0.0.0:29092,EXTERNAL://0.0.0.0:9092,CONTROLLER://0.0.0.0:9093'
      KAFKA_ADVERTISED_LISTENERS: 'INTERNAL://kafka:29092,EXTERNAL://localhost:9092'
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: 'INTERNAL:PLAINTEXT,EXTERNAL:PLAINTEXT,CONTROLLER:PLAINTEXT'
      KAFKA_INTER_BROKER_LISTENER_NAME: 'INTERNAL'
      KAFKA_CONTROLLER_LISTENER_NAMES: 'CONTROLLER'
      
      # KRaft Settings
      KAFKA_LOG_DIRS: '/var/lib/kafka/data'
      KAFKA_METADATA_LOG_DIR: '/var/lib/kafka/metadata'
      CLUSTER_ID: 'MkU3OEVCNTcwNTJENDM2Qk'  # Generate with: kafka-storage.sh random-uuid
      
      # Topic Configuration
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
      KAFKA_GROUP_INITIAL_REBALANCE_DELAY_MS: 0
      KAFKA_DEFAULT_REPLICATION_FACTOR: 1
      KAFKA_MIN_INSYNC_REPLICAS: 1
      
      # Performance Settings
      KAFKA_NUM_NETWORK_THREADS: 8
      KAFKA_NUM_IO_THREADS: 8
      KAFKA_SOCKET_SEND_BUFFER_BYTES: 102400
      KAFKA_SOCKET_RECEIVE_BUFFER_BYTES: 102400
      KAFKA_SOCKET_REQUEST_MAX_BYTES: 104857600
      KAFKA_NUM_PARTITIONS: 3
      
      # Log Settings
      KAFKA_LOG_RETENTION_HOURS: 168            # 7 days
      KAFKA_LOG_SEGMENT_BYTES: 1073741824       # 1GB
      KAFKA_LOG_RETENTION_CHECK_INTERVAL_MS: 300000
      KAFKA_LOG_CLEANUP_POLICY: 'delete'
      KAFKA_COMPRESSION_TYPE: 'snappy'
      
      # Security Settings (Disabled for dev, enable for production)
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: 'false'  # Require explicit topic creation
      KAFKA_DELETE_TOPIC_ENABLE: 'true'
      
      # JMX Monitoring
      KAFKA_JMX_PORT: 9101
      KAFKA_JMX_HOSTNAME: localhost
      KAFKA_JMX_OPTS: '-Dcom.sun.management.jmxremote -Dcom.sun.management.jmxremote.authenticate=false -Dcom.sun.management.jmxremote.ssl=false -Djava.rmi.server.hostname=kafka -Dcom.sun.management.jmxremote.rmi.port=9101'
      
      # JVM Performance Settings
      KAFKA_HEAP_OPTS: '-Xms1G -Xmx3G'
      KAFKA_JVM_PERFORMANCE_OPTS: '-XX:+UseG1GC -XX:MaxGCPauseMillis=20 -XX:InitiatingHeapOccupancyPercent=35 -XX:+ExplicitGCInvokesConcurrent -XX:MaxInlineLevel=15 -Djava.awt.headless=true'
      
    volumes:
      - kafka_kraft_data:/var/lib/kafka/data
      - kafka_kraft_metadata:/var/lib/kafka/metadata
      - ./kafka/kraft/server.properties:/etc/kafka/server.properties:ro
    healthcheck:
      test: ["CMD-SHELL", "kafka-broker-api-versions --bootstrap-server localhost:9092 || exit 1"]
      interval: 10s
      timeout: 10s
      retries: 5
      start_period: 30s
    networks:
      - smm_network
    deploy:
      resources:
        limits:
          cpus: '2'
          memory: 4G
        reservations:
          cpus: '1'
          memory: 2G
    # Format the storage on first run (required for KRaft)
    entrypoint: bash -c '
      if [ ! -f /var/lib/kafka/metadata/meta.properties ]; then
        echo "Formatting Kafka storage for KRaft mode..."
        kafka-storage format -t $${CLUSTER_ID} -c /etc/confluent/docker/kafka.properties --ignore-formatted
      fi &&
      /etc/confluent/docker/run
    '

  # Kafka UI for monitoring (optional but recommended)
  kafka-ui:
    image: provectuslabs/kafka-ui:latest
    container_name: smm_kafka_ui
    restart: unless-stopped
    ports:
      - "8090:8080"
    environment:
      KAFKA_CLUSTERS_0_NAME: local
      KAFKA_CLUSTERS_0_BOOTSTRAPSERVERS: kafka:29092
      KAFKA_CLUSTERS_0_METRICS_PORT: 9101
      KAFKA_CLUSTERS_0_SCHEMAREGISTRY: ''  # No schema registry
      DYNAMIC_CONFIG_ENABLED: 'true'
    depends_on:
      kafka:
        condition: service_healthy
    networks:
      - smm_network

  # Kafka topic initialization (runs once)
  kafka-init:
    image: confluentinc/cp-kafka:7.4.0
    container_name: smm_kafka_init
    depends_on:
      kafka:
        condition: service_healthy
    networks:
      - smm_network
    entrypoint: ["/bin/bash", "-c"]
    command: |
      "
      echo 'Waiting for Kafka to be ready...'
      sleep 10
      
      echo 'Creating Kafka topics...'
      
      # Order events topic
      kafka-topics --bootstrap-server kafka:29092 \
        --create --if-not-exists \
        --topic order-events \
        --partitions 6 \
        --replication-factor 1 \
        --config retention.ms=604800000 \
        --config compression.type=snappy \
        --config min.insync.replicas=1
      
      # Video processing events topic
      kafka-topics --bootstrap-server kafka:29092 \
        --create --if-not-exists \
        --topic video-processing-events \
        --partitions 3 \
        --replication-factor 1 \
        --config retention.ms=604800000 \
        --config compression.type=snappy
      
      # Offer assignment events topic
      kafka-topics --bootstrap-server kafka:29092 \
        --create --if-not-exists \
        --topic offer-assignment-events \
        --partitions 3 \
        --replication-factor 1 \
        --config retention.ms=604800000 \
        --config compression.type=snappy
      
      # Payment events topic
      kafka-topics --bootstrap-server kafka:29092 \
        --create --if-not-exists \
        --topic payment-events \
        --partitions 3 \
        --replication-factor 1 \
        --config retention.ms=604800000 \
        --config compression.type=snappy
      
      # Dead letter queue topic
      kafka-topics --bootstrap-server kafka:29092 \
        --create --if-not-exists \
        --topic dlq-events \
        --partitions 1 \
        --replication-factor 1 \
        --config retention.ms=2592000000 \
        --config compression.type=gzip
      
      # Audit log topic
      kafka-topics --bootstrap-server kafka:29092 \
        --create --if-not-exists \
        --topic audit-events \
        --partitions 1 \
        --replication-factor 1 \
        --config retention.ms=2592000000 \
        --config compression.type=gzip \
        --config min.insync.replicas=1
      
      echo 'Topics created successfully!'
      
      # List all topics
      echo 'Current topics:'
      kafka-topics --bootstrap-server kafka:29092 --list
      
      # Describe topics
      echo 'Topic details:'
      kafka-topics --bootstrap-server kafka:29092 --describe
      "

networks:
  smm_network:
    driver: bridge

volumes:
  kafka_kraft_data:
    driver: local
  kafka_kraft_metadata:
    driver: local