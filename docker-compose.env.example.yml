# ===================================================================
# Docker Compose Environment Integration Example
# SMM Panel - Spring Boot 3.1.7
# ===================================================================
# This file demonstrates how to properly integrate environment variables
# with Docker Compose for the SMM Panel application
# ===================================================================

version: '3.9'

# Shared environment variables for all Spring Boot services
x-spring-env: &spring-env
  # Spring Boot Core
  SPRING_PROFILES_ACTIVE: ${SPRING_PROFILES_ACTIVE:-prod}
  SERVER_PORT: ${SERVER_PORT:-8080}
  TZ: ${TZ:-UTC}
  
  # Database Configuration - Both Spring Boot naming and legacy
  SPRING_DATASOURCE_URL: jdbc:postgresql://postgres:5432/${DB_NAME:-smm_panel}?sslmode=require
  SPRING_DATASOURCE_USERNAME: ${DB_USER:-smm_admin}
  SPRING_DATASOURCE_PASSWORD: ${DB_PASSWORD}
  SPRING_DATASOURCE_DRIVER_CLASS_NAME: org.postgresql.Driver
  
  # HikariCP Pool Configuration
  SPRING_DATASOURCE_HIKARI_MAXIMUM_POOL_SIZE: ${DB_MAX_POOL_SIZE:-30}
  SPRING_DATASOURCE_HIKARI_MINIMUM_IDLE: ${DB_MIN_IDLE:-10}
  SPRING_DATASOURCE_HIKARI_CONNECTION_TIMEOUT: ${DB_CONNECTION_TIMEOUT:-20000}
  SPRING_DATASOURCE_HIKARI_IDLE_TIMEOUT: ${DB_IDLE_TIMEOUT:-600000}
  SPRING_DATASOURCE_HIKARI_MAX_LIFETIME: ${DB_MAX_LIFETIME:-1800000}
  
  # Redis Configuration
  SPRING_DATA_REDIS_HOST: redis
  SPRING_DATA_REDIS_PORT: 6379
  SPRING_DATA_REDIS_PASSWORD: ${REDIS_PASSWORD}
  SPRING_DATA_REDIS_DATABASE: 0
  SPRING_DATA_REDIS_TIMEOUT: 5000ms
  
  # Kafka Configuration
  SPRING_KAFKA_BOOTSTRAP_SERVERS: kafka:9092
  SPRING_KAFKA_CONSUMER_GROUP_ID: ${KAFKA_CONSUMER_GROUP_ID:-smm-panel-group}
  
  # JWT Security
  JWT_SECRET: ${JWT_SECRET}
  JWT_EXPIRATION_MS: ${JWT_EXPIRATION_MS:-86400000}
  JWT_REFRESH_EXPIRATION_MS: ${JWT_REFRESH_EXPIRATION_MS:-604800000}
  
  # API Security
  API_KEY_GLOBAL_SALT: ${API_KEY_GLOBAL_SALT}
  
  # Liquibase
  SPRING_LIQUIBASE_ENABLED: ${LIQUIBASE_SHOULD_RUN:-true}
  SPRING_LIQUIBASE_CONTEXTS: ${SPRING_PROFILES_ACTIVE:-prod}
  
  # External APIs
  BINOM_API_URL: ${BINOM_API_URL}
  BINOM_API_KEY: ${BINOM_API_KEY}
  YOUTUBE_API_KEY: ${YOUTUBE_API_KEY}
  CRYPTOMUS_API_KEY: ${CRYPTOMUS_API_KEY}
  CRYPTOMUS_API_SECRET: ${CRYPTOMUS_API_SECRET}
  CRYPTOMUS_WEBHOOK_SECRET: ${CRYPTOMUS_WEBHOOK_SECRET}
  
  # CORS
  CORS_ORIGINS: ${CORS_ORIGINS}
  
  # Monitoring
  MANAGEMENT_ENDPOINTS_WEB_EXPOSURE_INCLUDE: health,info,metrics,prometheus
  MANAGEMENT_ENDPOINT_HEALTH_SHOW_DETAILS: when-authorized
  MANAGEMENT_METRICS_EXPORT_PROMETHEUS_ENABLED: true

services:
  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: smm_postgres
    restart: unless-stopped
    environment:
      POSTGRES_DB: ${POSTGRES_DB:-smm_panel}
      POSTGRES_USER: ${POSTGRES_USER:-smm_admin}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_INITDB_ARGS: "-E UTF8 --locale=en_US.UTF-8"
      PGDATA: /var/lib/postgresql/data/pgdata
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./init-scripts:/docker-entrypoint-initdb.d:ro
      - ./postgresql.conf:/etc/postgresql/postgresql.conf:ro
    ports:
      - "${DB_PORT:-5432}:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-smm_admin} -d ${POSTGRES_DB:-smm_panel}"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - smm_network

  # Redis Cache
  redis:
    image: redis:7-alpine
    container_name: smm_redis
    restart: unless-stopped
    command: >
      redis-server
      --requirepass ${REDIS_PASSWORD}
      --maxmemory ${REDIS_MAX_MEMORY:-2gb}
      --maxmemory-policy ${REDIS_MAXMEMORY_POLICY:-allkeys-lru}
      --save 900 1
      --save 300 10
      --save 60 10000
      --appendonly yes
      --appendfsync everysec
    volumes:
      - redis_data:/data
      - redis_backup:/backup
    ports:
      - "${REDIS_PORT:-6379}:6379"
    healthcheck:
      test: ["CMD", "redis-cli", "--no-auth-warning", "-a", "${REDIS_PASSWORD}", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - smm_network

  # Zookeeper for Kafka
  zookeeper:
    image: confluentinc/cp-zookeeper:7.5.0
    container_name: smm_zookeeper
    restart: unless-stopped
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
      ZOOKEEPER_INIT_LIMIT: 5
      ZOOKEEPER_SYNC_LIMIT: 2
    volumes:
      - zookeeper_data:/var/lib/zookeeper/data
      - zookeeper_logs:/var/lib/zookeeper/log
    networks:
      - smm_network

  # Kafka Message Broker
  kafka:
    image: confluentinc/cp-kafka:7.5.0
    container_name: smm_kafka
    restart: unless-stopped
    depends_on:
      - zookeeper
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092,PLAINTEXT_HOST://localhost:29092
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
      KAFKA_GROUP_INITIAL_REBALANCE_DELAY_MS: 0
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: 'true'
      KAFKA_LOG_RETENTION_HOURS: 168
      KAFKA_LOG_SEGMENT_BYTES: 1073741824
      KAFKA_LOG_RETENTION_CHECK_INTERVAL_MS: 300000
      KAFKA_COMPRESSION_TYPE: snappy
    volumes:
      - kafka_data:/var/lib/kafka/data
    ports:
      - "29092:29092"
      - "9092:9092"
    healthcheck:
      test: ["CMD", "kafka-broker-api-versions", "--bootstrap-server", "localhost:9092"]
      interval: 10s
      timeout: 10s
      retries: 5
    networks:
      - smm_network

  # Spring Boot Application
  spring-boot-app:
    image: smm-panel:latest
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: smm_spring_app
    restart: unless-stopped
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      kafka:
        condition: service_healthy
    environment:
      <<: *spring-env  # Include all Spring environment variables
      # Additional application-specific variables
      JAVA_OPTS: >
        -Xms${JVM_HEAP_MIN:-1024m}
        -Xmx${JVM_HEAP_MAX:-2048m}
        -XX:+UseG1GC
        -XX:MaxGCPauseMillis=200
        -XX:+HeapDumpOnOutOfMemoryError
        -XX:HeapDumpPath=/tmp/heapdump.hprof
        -Dspring.profiles.active=${SPRING_PROFILES_ACTIVE:-prod}
        -Dfile.encoding=UTF-8
        -Djava.security.egd=file:/dev/./urandom
    volumes:
      - app_logs:/var/log/smm-panel
      - app_uploads:${FILE_UPLOAD_PATH:-/tmp/smm-panel/uploads}
    ports:
      - "${SERVER_PORT:-8080}:8080"
      - "${MANAGEMENT_PORT:-8081}:8081"  # Actuator endpoints
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/actuator/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    networks:
      - smm_network
    deploy:
      resources:
        limits:
          cpus: '2'
          memory: 3G
        reservations:
          cpus: '1'
          memory: 1G

  # Nginx Reverse Proxy (Production)
  nginx:
    image: nginx:alpine
    container_name: smm_nginx
    restart: unless-stopped
    depends_on:
      - spring-boot-app
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/conf.d:/etc/nginx/conf.d:ro
      - nginx_cache:/var/cache/nginx
      - nginx_logs:/var/log/nginx
      - ssl_certs:/etc/nginx/ssl:ro
    ports:
      - "80:80"
      - "443:443"
    environment:
      NGINX_HOST: ${NGINX_HOST:-localhost}
      NGINX_PORT: ${NGINX_PORT:-80}
    networks:
      - smm_network

  # Prometheus for Metrics Collection
  prometheus:
    image: prom/prometheus:latest
    container_name: smm_prometheus
    restart: unless-stopped
    volumes:
      - ./prometheus/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--storage.tsdb.retention.time=30d'
      - '--web.console.libraries=/usr/share/prometheus/console_libraries'
      - '--web.console.templates=/usr/share/prometheus/consoles'
      - '--web.enable-lifecycle'
    ports:
      - "9090:9090"
    networks:
      - smm_network

  # Grafana for Visualization
  grafana:
    image: grafana/grafana:latest
    container_name: smm_grafana
    restart: unless-stopped
    environment:
      GF_SECURITY_ADMIN_USER: ${GRAFANA_USER:-admin}
      GF_SECURITY_ADMIN_PASSWORD: ${GRAFANA_PASSWORD}
      GF_INSTALL_PLUGINS: redis-datasource,redis-app
      GF_FEATURE_TOGGLES_ENABLE: publicDashboards
    volumes:
      - grafana_data:/var/lib/grafana
      - ./grafana/provisioning:/etc/grafana/provisioning:ro
      - ./grafana/dashboards:/var/lib/grafana/dashboards:ro
    ports:
      - "3001:3000"
    depends_on:
      - prometheus
    networks:
      - smm_network

networks:
  smm_network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.28.0.0/16

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  redis_backup:
    driver: local
  kafka_data:
    driver: local
  zookeeper_data:
    driver: local
  zookeeper_logs:
    driver: local
  app_logs:
    driver: local
  app_uploads:
    driver: local
  nginx_cache:
    driver: local
  nginx_logs:
    driver: local
  ssl_certs:
    driver: local
  prometheus_data:
    driver: local
  grafana_data:
    driver: local